---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>

		<div class="grid h-screen w-full grid-cols-[auto_1fr]">
			<header class="h-full col-start-1 col-span-1 bg-slate-100 flex justify-center items-center px-5 py-5">
				<h1 class="[writing-mode:vertical-lr] text-6xl font-extrabold text-white">Map Maker</h1>
			</header>
			<main class="col-span-1 col-start-2 place-self-center justify-self-center  bg-slate-50 flex justify-center">
				<canvas class="border w-[800px] aspect-video place-self-center" id="canvas" data-resize="true" class="w-full h-full"></canvas>
			</main>
		</div>
	</body>
</html>


<script>
  import paper from "paper";


  window.onload = setup;
  function setup() {
    paper.setup("canvas");
    draw();
  }
  function draw() {
    const map = new paper.Raster({
        crossOrigin: "anonymous",
        source: "https://res.cloudinary.com/makingthings/image/upload/v1709893751/texture_planet_earth_color_xbkkx1.jpg"
    });

    const gridSize = 3;
    const spacing = 1.6;
    
    map.on('load', () => {
        map.size = new paper.Size(300, 150);
        const { width, height } = map.size;
        
        // Clear previous content before drawing
        paper.project.activeLayer.removeChildren();

        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const color = map.getPixel(x, y);
                const pixel = new paper.Path.Circle({
                    center: new paper.Point(x * gridSize, y * gridSize),
                    radius: gridSize / 2 / spacing,
                    fillColor: new paper.Color(color)
                });
                pixel.scale(1 - color.gray);
            }
        }

        const button = document.createElement('button');
        button.classList.add('px-6', 'text-3xl', 'py-4', 'rounded', 'bg-sky-700', 'text-white');
        button.textContent = 'Download';
        document.body.appendChild(button);

        button.addEventListener('click', () => {
            const svg = paper.project.exportSVG({
                asString: true,
                bounds: 'content',
                embedImages: false
            }) as string;
            
            const blob = new Blob([svg], {
                type: 'image/svg+xml;charset=utf-8'
            });
            
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = 'map.svg';
            a.click();

            URL.revokeObjectURL(a.href);
        });
    });

    paper.project.activeLayer.position = paper.view.center;
}
</script>